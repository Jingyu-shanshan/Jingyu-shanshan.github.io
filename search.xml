<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA interview Questions</title>
      <link href="/en/2024/05/25/JAVA-interview-Questions/"/>
      <url>/en/2024/05/25/JAVA-interview-Questions/</url>
      
        <content type="html"><![CDATA[<h1 id="INTERVIEW-QUESTIONS"><a href="#INTERVIEW-QUESTIONS" class="headerlink" title="INTERVIEW QUESTIONS"></a>INTERVIEW QUESTIONS</h1><p>I will post some possible JAVA interview questions here.</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ol><li><p>Do we need to add <code>volatile</code> to Singleton instance when using Double-Checked Locking?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Answer: Yes. When the program try to <code>new Singleton()</code>, it allocates the memory for the object and initializes the default value to properties of object. Without the volatile keyword, there’s a possibility of instruction reordering. This could lead to another thread passing the first <code>if</code> check while instance is not null, even though the initialization of the instance hasn’t been completed yet. Consequently, it might return a partially initialized object, causing errors.<br>In this implementation, the instance variable is declared as <code>volatile</code>, which prevents <strong>instruction reordering</strong>. In a multithreaded environment, when a thread initially calls the <code>getInstance()</code> method, it reaches the first <code>if</code> condition check. If instance is <code>null</code>, it enters the synchronized block to create the instance.</p></li><li><p>Cache line false sharing problem.<br>Cache line false sharing occurs in a multicore system when multiple threads modify variables that are located on the same cache line, causing performance degradation due to unnecessary cache coherence traffic.</p><ul><li><strong>Cache Line Basics:</strong> Modern CPUs have multiple levels of caches (L1, L2, L3) to speed up memory access. Data is loaded from main memory into the CPU caches in chunks called cache lines, typically 64 bytes in size.</li><li><strong>False Sharing Scenario:</strong> False sharing happens when different threads on different cores modify variables that reside on the same cache line. Even if the variables are independent and the threads are not logically sharing data, they are physically sharing the same cache line.</li><li><strong>Performance Impact:</strong> When one thread modifies a variable, the entire cache line is invalidated in other cores’ caches. This forces the other cores to reload the cache line from memory, even if they are only interested in other variables within the same cache line. This invalidation and reloading cause significant performance overhead due to the increased cache coherence traffic.</li></ul></li></ol><p>The following code may occur False Sharing issues:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FalseSharingExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SharedData</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">long</span> var1;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">long</span> var2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">SharedData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedData</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                data.var1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                data.var2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, <code>var1</code> and <code>var2</code> are likely to reside on the same cache line. Modifying var1 in one thread will cause the cache line containing <code>var2</code> to be invalidated in the other thread’s cache, leading to performance issues due to false sharing.</p><p>To mitigate false sharing, you can pad the variables so that they occupy different cache lines. This can be done using padding or special annotations depending on the language and platform:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FalseSharingSolution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SharedData</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">long</span> var1;</span><br><span class="line">        <span class="comment">// Padding to ensure var1 and var2 are on different cache lines</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">long</span> var2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">SharedData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedData</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                data.var1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">                data.var2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By adding padding fields between <code>var1</code> and <code>var2</code>, you ensure they are placed in separate cache lines, thereby avoiding false sharing and improving performance.</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parent Delegation Model</title>
      <link href="/en/2024/05/20/Parent-Delegation-Model/"/>
      <url>/en/2024/05/20/Parent-Delegation-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="Parent-Delegation-Model-In-JVM"><a href="#Parent-Delegation-Model-In-JVM" class="headerlink" title="Parent Delegation Model In JVM"></a>Parent Delegation Model In JVM</h1><p>The Parent Delegation Model in Java class loading refers to the hierarchical approach used by class loaders to load classes. This model ensures that class loaders delegate the task of class loading to their parent class loaders before attempting to load the class themselves.</p><p><img src="/en/2024/05/20/Parent-Delegation-Model/parent-delegation-model.png" alt="Parent Delegation Model Work Flow"></p><h2 id="Hierarchy-of-Class-Loaders"><a href="#Hierarchy-of-Class-Loaders" class="headerlink" title="Hierarchy of Class Loaders:"></a>Hierarchy of Class Loaders:</h2><ul><li>Java uses a hierarchical delegation model where every class loader has a parent class loader. The delegation starts from the top of the hierarchy with the bootstrap class loader, which is responsible for loading core Java classes (<code>java.*</code>).</li><li>Custom class loaders typically extend <code>java.lang.ClassLoader</code> and have a parent class loader, forming a chain up to the bootstrap class loader.</li></ul><h2 id="Delegation-Mechanism"><a href="#Delegation-Mechanism" class="headerlink" title="Delegation Mechanism:"></a>Delegation Mechanism:</h2><ul><li>When a class loader is asked to load a class, it first delegates this request to its parent class loader before attempting to load the class itself. This ensures that core Java classes and those provided by the application are loaded by the appropriate class loaders and prevents duplicate class definitions.</li><li>For example, if a custom class loader attempts to load a class named <code>java.util.ArrayList</code>, it will first delegate this request to its parent. Since <code>ArrayList</code> is part of the core Java libraries, it will be loaded by the bootstrap class loader.</li></ul><h2 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages:"></a>Advantages:</h2><ul><li><strong>Security</strong>: Prevents malicious classes from overriding core Java classes by ensuring they are always loaded by the bootstrap class loader.</li><li><strong>Consistency</strong>: Ensures that the same version of a class is used throughout the application, avoiding conflicts and inconsistencies.</li></ul><h1 id="Implement-Custom-ClassLoader"><a href="#Implement-Custom-ClassLoader" class="headerlink" title="Implement Custom ClassLoader"></a>Implement Custom ClassLoader</h1><p>Creating a custom class loader in Java allows you to define how classes are loaded into the JVM. This can be useful for a variety of tasks, such as loading classes from unconventional sources, applying custom transformations, or implementing security policies.</p><h2 id="Step-by-Step-Guide"><a href="#Step-by-Step-Guide" class="headerlink" title="Step-by-Step Guide"></a>Step-by-Step Guide</h2><h3 id="Extend-ClassLoader"><a href="#Extend-ClassLoader" class="headerlink" title="Extend ClassLoader:"></a>Extend ClassLoader:</h3><ul><li>Create a new class that extends java.lang.ClassLoader.</li></ul><h3 id="Override-findClass-Method"><a href="#Override-findClass-Method" class="headerlink" title="Override findClass Method:"></a>Override findClass Method:</h3><ul><li>Override the findClass method to define how the class loader should find and load classes.</li></ul><h3 id="Define-Class-Loading-Logic"><a href="#Define-Class-Loading-Logic" class="headerlink" title="Define Class Loading Logic:"></a>Define Class Loading Logic:</h3><ul><li>Implement the logic for loading class data, such as reading class bytes from a file, network, or other sources.</li></ul><h2 id="Example-Code"><a href="#Example-Code" class="headerlink" title="Example Code"></a>Example Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String classesDir;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomClassLoader</span><span class="params">(String classesDir)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classesDir = classesDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classData = loadClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Class not found: &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String name) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> classesDir + File.separator + name.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) <span class="keyword">new</span> <span class="title class_">File</span>(filePath).length()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            <span class="keyword">return</span> buffer;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CustomClassLoader</span> <span class="variable">customClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClassLoader</span>(<span class="string">&quot;path/to/classes&quot;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = customClassLoader.loadClass(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">            System.out.println(<span class="string">&quot;Class loaded and instance created: &quot;</span> + instance.getClass().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>The parent delegation model ensures that the system class loader (or any custom class loader) delegates the loading of a class to its parent before attempting to load it itself. This hierarchical delegation helps in maintaining a clear separation of responsibilities and ensures that core Java classes are loaded by the trusted system class loader (or its parent)​.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://www.oracle.com/technical-resources/articles/javase/classloaders.html">Understanding Network Class Loaders</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM Introduction</title>
      <link href="/en/2024/05/19/JVM-Introduction/"/>
      <url>/en/2024/05/19/JVM-Introduction/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Virtual-Machine-JVM-Architecture"><a href="#Java-Virtual-Machine-JVM-Architecture" class="headerlink" title="Java Virtual Machine (JVM) Architecture"></a>Java Virtual Machine (JVM) Architecture</h1><p>The Java Virtual Machine (JVM) is a core component of the Java platform, providing a runtime environment that enables Java applications to execute.</p><h2 id="Java-Architecture"><a href="#Java-Architecture" class="headerlink" title="Java Architecture"></a>Java Architecture</h2><p>Let’s look at Java architecture to get a high-level picture of JVM.</p><p><img src="/en/2024/05/19/JVM-Introduction/Java-architecture.png" alt="Java Architecture"></p><h1 id="Internal-Structure-of-JVM"><a href="#Internal-Structure-of-JVM" class="headerlink" title="Internal Structure of JVM"></a>Internal Structure of JVM</h1><p><img src="/en/2024/05/19/JVM-Introduction/JVM-architecture.png" alt="JVM Architecture"></p><p>There are three main mechanisms inside the JVM as shown in the above diagram.</p><ul><li>ClassLoader</li><li>Memory Area</li><li>Execution Engine</li></ul><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>The Class Loader Subsystem is a foundational part of the JVM, enabling the dynamic loading, linking, and initialization of classes. By following a hierarchical delegation model, it ensures the integrity and consistency of the class loading process, while also providing flexibility through custom class loaders.</p><h3 id="How-the-Class-Loader-Subsystem-Works"><a href="#How-the-Class-Loader-Subsystem-Works" class="headerlink" title="How the Class Loader Subsystem Works"></a>How the Class Loader Subsystem Works</h3><ul><li><strong>Loading</strong>:<ul><li>The Class Loader Subsystem loads class files into the JVM from various sources, such as local file systems, remote servers, or network locations.</li><li>This process involves locating the class file, reading its binary data, and then transforming it into a class object in memory.</li><li>The <a href="/en/2024/05/20/Parent-Delegation-Model/" title="Parent Delegation Model">Parent Delegation Model</a> is used.</li></ul></li><li><strong>Linking</strong>:<ul><li>Verification: Ensures the correctness of the bytecode, making sure it adheres to the JVM’s constraints and security standards.</li><li>Preparation: Allocates memory for class variables (static fields) and initializes them with default values.</li><li>Resolution: Converts symbolic references in the class file into actual references to memory locations.</li></ul></li><li><strong>Initialization</strong>:<ul><li>Executes the class’s static initializers and the static blocks of code.</li><li>This phase involves executing any class initialization code to set up static fields and other static structures.</li></ul></li></ul><h2 id="Runtime-Data-Area"><a href="#Runtime-Data-Area" class="headerlink" title="Runtime Data Area"></a>Runtime Data Area</h2><p>Runtime data areas are essential components that support the execution of Java programs. The JVM runtime data areas include several key components:</p><ul><li><strong>Program Counter (PC) Register:</strong> Each JVM thread has its own PC register. At any point, each Java virtual machine thread is executing the code of a single method, the current method for that thread.</li><li><strong>Java Virtual Machine Stacks:</strong> Each Java virtual machine thread has a private Java virtual machine stack, created at the same time as the thread.<ul><li>Each method creates a stack frame when it executes, which stores the local variable table, operand stack, dynamic linking, method return address, and other information.</li><li>The process of calling a method and completing its execution corresponds to pushing and popping a stack frame in the JVM stack.</li></ul></li><li><strong>Native Method Stacks:</strong><ul><li>These stacks are similar to JVM stacks but are used for native methods. </li><li>The HotSpot JVM does not distinguish between the JVM stack and the native method stack, treating them as a single stack​</li></ul></li><li><strong>Method Area:</strong> This area stores class structures such as the runtime constant pool, field and method data, and the code for methods and constructors. In the HotSpot JVM, this area is often referred to as the “Permanent Generation” (PermGen), though in JDK 8 and later, it has been replaced by the “Metaspace”</li><li><strong>Heap:</strong> The heap is shared among all JVM threads and is the runtime data area from which memory for all class instances and arrays is allocated. The heap is created at JVM startup and is managed by the garbage collector, which reclaims memory used by objects that are no longer reachable​.<ul><li>From a memory reclamation perspective, it is divided into the young generation and old generation, which are further subdivided into Eden space, From Survivor space, and To Survivor space.</li><li>From a memory allocation perspective, it may include multiple thread-local allocation buffers (TLABs) for private allocation by threads.</li></ul></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] <a href="https://medium.com/java-for-beginners/understanding-java-virtual-machine-jvm-architecture-e68d1c611026">Understanding Java Virtual Machine (JVM) Architecture</a><br>[2] <a href="https://docs.oracle.com/javase/specs/jvms/se6/html/Overview.doc.html">The Structure of the Java Virtual Machine</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/en/2024/04/30/Hello-World/"/>
      <url>/en/2024/04/30/Hello-World/</url>
      
        <content type="html"><![CDATA[<h1 id="Introducing-Jingyu-Liu-Software-Developer-and-Game-Enthusiast-and-Cat-Lover"><a href="#Introducing-Jingyu-Liu-Software-Developer-and-Game-Enthusiast-and-Cat-Lover" class="headerlink" title="Introducing Jingyu Liu: Software Developer and Game Enthusiast, and Cat Lover"></a>Introducing Jingyu Liu: Software Developer and Game Enthusiast, and Cat Lover</h1><p>Hello there! I’m Jingyu Liu, a passionate software developer with a knack for creating engaging games and crafting efficient code. With proficiency in C#, Java, and Python, coupled with a strong grasp of Agile development and Continuous Integration&#x2F;Continuous Deployment (CI&#x2F;CD) practices, I thrive in the dynamic world of software engineering.</p><h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><h3 id="Professional-Background"><a href="#Professional-Background" class="headerlink" title="Professional Background"></a>Professional Background</h3><p>I’ve been immersed in the world of software development for half and two years, and during this journey, I’ve honed my skills in various programming languages and methodologies. Whether it’s developing robust backend systems in C#, building scalable applications in Java, or crafting elegant solutions in Python, I relish the challenge of solving complex problems with elegant code.</p><h3 id="Passion-for-Game-Development"><a href="#Passion-for-Game-Development" class="headerlink" title="Passion for Game Development"></a>Passion for Game Development</h3><p>One of my greatest joys in programming is bringing ideas to life through games. From simple text-based adventures to immersive 3D experiences, I love exploring the intersection of technology and creativity. Game development allows me to unleash my imagination while leveraging my technical expertise to deliver memorable experiences for players.</p><h2 id="What-I-Bring-to-the-Table"><a href="#What-I-Bring-to-the-Table" class="headerlink" title="What I Bring to the Table"></a>What I Bring to the Table</h2><h3 id="Agile-and-CI-CD-Advocate"><a href="#Agile-and-CI-CD-Advocate" class="headerlink" title="Agile and CI&#x2F;CD Advocate"></a>Agile and CI&#x2F;CD Advocate</h3><p>I strongly believe in the Agile manifesto’s principles of collaboration, adaptability, and customer satisfaction. As an Agile practitioner, I thrive in fast-paced environments, embracing change and delivering value incrementally. Additionally, my proficiency in CI&#x2F;CD pipelines ensures that software is continuously integrated, tested, and deployed, enabling rapid feedback loops and enhancing overall product quality.</p><h3 id="Creative-Problem-Solver"><a href="#Creative-Problem-Solver" class="headerlink" title="Creative Problem Solver"></a>Creative Problem Solver</h3><p>Whether it’s optimizing algorithms for performance or designing intuitive user interfaces, I approach every challenge with creativity and ingenuity. My ability to think outside the box allows me to devise innovative solutions that not only meet technical requirements but also delight end-users.</p><h2 id="Let’s-Connect"><a href="#Let’s-Connect" class="headerlink" title="Let’s Connect!"></a>Let’s Connect!</h2><p>If you’re as passionate about software development and game creation as I am, I’d love to connect! Whether it’s discussing the latest tech trends, sharing game development tips, or collaborating on exciting projects, feel free to reach out. Together, we can push the boundaries of what’s possible in the world of software engineering and gaming.</p><p>Thanks for stopping by, and I look forward to embarking on this journey together!</p><p>Jingyu Liu</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
